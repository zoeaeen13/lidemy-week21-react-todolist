{"version":3,"sources":["contexts.js","components/FormItems.js","constants/style.js","components/Wrappers.js","images/check.svg","images/uncheck.svg","images/delete.svg","components/Todoitem.js","components/App.js","index.js"],"names":["TypeContext","createContext","FormWrapper","styled","form","InputWrapper","div","SectionWrapper","section","RadioButton","typeName","selectedType","handleClick","className","type","name","id","onClick","Form","value","handleInputChnage","handleAddTodo","onSubmit","placeholder","onChange","FormButtons","handleClearTodos","handleSelectType","useContext","data-toggle","map","index","Wrapper","TodosWrapper","TodoWrapper","props","isDone","ImageWrapper","TodoItem","todo","handleToggleTodo","handlgeEditTodo","handleDeleteTodo","alt","src","imgCheck","imgUncheck","content","readOnly","imgDelete","App","useState","setSelectType","setValue","todos","setTodos","filter","e","Number","target","Provider","preventDefault","isShowed","mode","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce9b4429.chunk.js","sourcesContent":["import { createContext } from \"react\";\nexport const TypeContext = createContext(null);\n","import styled from \"styled-components\";\nimport { MEDIA_QUERY_MD } from \"../constants/style\";\nimport PropTypes from \"prop-types\";\nimport { TypeContext } from \"../contexts\";\nimport { useContext } from \"react\";\n\nconst FormWrapper = styled.form`\n  box-sizing: border-box;\n  border-radius: 1.5px;\n  padding: 10px 0 20px 0;\n  width: 100%;\n  background: #5eaaa8;\n  text-align: center;\n\n  h1 {\n    margin: 10px;\n    font-size: 2rem;\n    color: white;\n  }\n`;\n\nconst InputWrapper = styled.div`\n  margin: 0 auto;\n  width: 90%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  button {\n    margin: 0 10px;\n  }\n\n  input {\n    box-sizing: border-box;\n    border: none;\n    border-radius: 3px;\n    padding: 5px;\n    width: 70%;\n    background: #a3d2ca;\n\n    &:focus {\n      outline: none;\n    }\n  }\n`;\n\nconst SectionWrapper = styled.section`\n  display: flex;\n  justify-content: space-between;\n  padding: 20px;\n  background: white;\n\n  ${MEDIA_QUERY_MD} {\n    flex-wrap: wrap;\n    justify-content: center;\n\n    button {\n      margin: 10px 0;\n    }\n\n    div {\n      margin: 0 10px;\n    }\n  }\n`;\n\nfunction RadioButton({ typeName, selectedType, handleClick }) {\n  return (\n    <label\n      className={`btn btn-secondary ${\n        selectedType === typeName ? \"active\" : \"\"\n      }`}\n    >\n      <input type=\"radio\" name=\"options\" id={typeName} onClick={handleClick} />\n      {typeName}\n    </label>\n  );\n}\n\nexport function Form({ value, handleInputChnage, handleAddTodo }) {\n  return (\n    <FormWrapper onSubmit={handleAddTodo}>\n      <h1>TODOs</h1>\n      <InputWrapper>\n        <input\n          type=\"text\"\n          placeholder=\"Let's do something!\"\n          onChange={handleInputChnage}\n          value={value}\n        />\n        <button className=\"btn btn-light\">Add</button>\n      </InputWrapper>\n    </FormWrapper>\n  );\n}\n\nexport function FormButtons({ handleClearTodos, handleSelectType }) {\n  const { selectedType } = useContext(TypeContext);\n  const typeList = [\"All\", \"Completed\", \"Incomplete\"];\n\n  return (\n    <SectionWrapper>\n      <button className=\"btn btn-danger\" onClick={handleClearTodos}>\n        Clear\n      </button>\n      <div className=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n        {typeList.map((type, index) => (\n          <RadioButton\n            key={index}\n            typeName={type}\n            selectedType={selectedType}\n            handleClick={handleSelectType}\n          />\n        ))}\n      </div>\n    </SectionWrapper>\n  );\n}\n\nRadioButton.propTypes = {\n  typeName: PropTypes.string,\n  selectedType: PropTypes.string,\n  handleClick: PropTypes.func,\n};\n\nForm.propTypes = {\n  value: PropTypes.string,\n  handleInputChnage: PropTypes.func,\n  handleAddTodo: PropTypes.func,\n};\n\nFormButtons.propTypes = {\n  handleClearTodos: PropTypes.func,\n  handleSelectType: PropTypes.func,\n};\n","export const MEDIA_QUERY_MD = \"@media (max-width: 576px)\";\nexport const MEDIA_QUERY_LG = \"@media (min-width: 768px)\";\n","import styled from \"styled-components\";\nimport { MEDIA_QUERY_LG } from \"../constants/style\";\n\nexport const Wrapper = styled.div`\n  margin: 10vh auto;\n  width: 90vw;\n  ${MEDIA_QUERY_LG} {\n    width: 60vw;\n  }\n`;\n\nexport const TodosWrapper = styled.section`\n  background: white;\n  box-shadow: 4px 4px 25px #f0f0f0;\n`;\n","export default __webpack_public_path__ + \"static/media/check.30036e3a.svg\";","export default __webpack_public_path__ + \"static/media/uncheck.50bf432c.svg\";","export default __webpack_public_path__ + \"static/media/delete.7f39c7af.svg\";","import styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\nimport imgCheck from \"../images/check.svg\";\nimport imgUncheck from \"../images/uncheck.svg\";\nimport imgDelete from \"../images/delete.svg\";\n\nconst TodoWrapper = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  border: 1px solid transparent;\n\n  &:hover {\n    box-shadow: 0px 2px 10px #eeeeee;\n  }\n\n  input {\n    width: 80%;\n    border: none;\n    border-bottom: 1px solid transparent;\n    ${(props) =>\n      props.isDone &&\n      `\n    color: gray;\n    text-decoration: line-through;  \n  `}\n\n    &:focus {\n      outline: none;\n      border-color: #eeeeee;\n    }\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  box-sizing: border-box;\n  padding: 8px;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n\n  img {\n    width: 90%;\n    height: 90%;\n    object-fit: cover;\n  }\n`;\n\nexport function TodoItem({\n  todo,\n  handleToggleTodo,\n  handlgeEditTodo,\n  handleDeleteTodo,\n}) {\n  const handleToggleClick = () => {\n    handleToggleTodo(todo.id);\n  };\n\n  const handleDeleteClick = () => {\n    handleDeleteTodo(todo.id);\n  };\n\n  return (\n    <TodoWrapper isDone={todo.isDone}>\n      <ImageWrapper>\n        <img\n          alt=\"\"\n          src={todo.isDone ? imgCheck : imgUncheck}\n          onClick={handleToggleClick}\n        />\n      </ImageWrapper>\n      <input\n        type=\"text\"\n        id={todo.id}\n        value={todo.content}\n        readOnly={todo.isDone}\n        onChange={handlgeEditTodo}\n      />\n      <ImageWrapper>\n        <img alt=\"\" src={imgDelete} onClick={handleDeleteClick} />\n      </ImageWrapper>\n    </TodoWrapper>\n  );\n}\n\nTodoItem.propTypes = {\n  todo: PropTypes.object,\n  handleToggleTodo: PropTypes.func,\n  handlgeEditTodo: PropTypes.func,\n  handleDeleteTodo: PropTypes.func,\n};\n","import { Form, FormButtons } from \"./FormItems\";\nimport { Wrapper, TodosWrapper } from \"./Wrappers\";\nimport { TodoItem } from \"./Todoitem\";\nimport { useState } from \"react\";\nimport { TypeContext } from \"../contexts\";\n\nlet id = 1;\nfunction App() {\n  const [selectedType, setSelectType] = useState(\"All\");\n  const [value, setValue] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n\n  // handle input change\n  function handleInputChnage(e) {\n    setValue(e.target.value);\n  }\n\n  // add todo\n  function handleAddTodo(e) {\n    e.preventDefault();\n    if (value !== \"\") {\n      setTodos([\n        {\n          id,\n          content: value,\n          isDone: false,\n          isShowed: selectedType !== \"Completed\",\n        },\n        ...todos,\n      ]);\n\n      id += 1;\n      setValue(\"\");\n    }\n  }\n\n  // delete todo\n  function handleDeleteTodo(id) {\n    setTodos(todos.filter((todo) => todo.id !== id));\n  }\n\n  // todo toggle\n  function handleToggleTodo(id) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== id) return todo;\n        return {\n          ...todo,\n          isDone: !todo.isDone,\n        };\n      })\n    );\n  }\n\n  // edit todo\n  function handlgeEditTodo(e) {\n    setTodos(\n      todos.map((todo) => {\n        if (todo.id !== Number(e.target.id)) return todo;\n        return {\n          ...todo,\n          content: e.target.value,\n        };\n      })\n    );\n  }\n\n  // clear finished todos\n  function handleClearTodos() {\n    setTodos(todos.filter((todo) => !todo.isDone));\n  }\n\n  // set type to show\n  function handleSelectType(e) {\n    const mode = e.target.id;\n    setSelectType(mode);\n    switch (mode) {\n      case \"Completed\":\n        setTodos(\n          todos.map((todo) => {\n            if (todo.isDone) {\n              return {\n                ...todo,\n                isShowed: true,\n              };\n            }\n            return {\n              ...todo,\n              isShowed: false,\n            };\n          })\n        );\n        break;\n      case \"Incomplete\":\n        setTodos(\n          todos.map((todo) => {\n            if (!todo.isDone) {\n              return {\n                ...todo,\n                isShowed: true,\n              };\n            }\n            return {\n              ...todo,\n              isShowed: false,\n            };\n          })\n        );\n        break;\n      default:\n        setTodos(\n          todos.map((todo) => {\n            return {\n              ...todo,\n              isShowed: true,\n            };\n          })\n        );\n        break;\n    }\n  }\n\n  return (\n    <TypeContext.Provider value={{ selectedType }}>\n      <div className=\"App\">\n        <Wrapper>\n          <Form\n            value={value}\n            handleInputChnage={handleInputChnage}\n            handleAddTodo={handleAddTodo}\n          />\n          <FormButtons\n            handleSelectType={handleSelectType}\n            handleClearTodos={handleClearTodos}\n          />\n          <TodosWrapper>\n            {todos.map((todo) => {\n              if (todo.isShowed) {\n                return (\n                  <TodoItem\n                    key={todo.id}\n                    todo={todo}\n                    handlgeEditTodo={handlgeEditTodo}\n                    handleToggleTodo={handleToggleTodo}\n                    handleDeleteTodo={handleDeleteTodo}\n                  />\n                );\n              }\n              return null;\n            })}\n          </TodosWrapper>\n        </Wrapper>\n      </div>\n    </TypeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}